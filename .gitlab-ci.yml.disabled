image: universumstudios/android:api-27

### CONFIGURATION ==================================================================================

variables:
  # PRODUCT:
  PRODUCT_ID: "universum.studios.android.template"
  FILE_VERSION_PROPERTIES: "/build_codes/android/${CI_PRODUCT_KEY}/version.properties"
  # BUILD:
  BUILD_DIRECTORY_MOBILE: "mobile/build/"
  MAVEN_REPOSITORY: "./.m2/repository"
  MAVEN_OPTS: "-Dmaven.repo.local=${MAVEN_REPOSITORY}"
  GRADLE_HOME: "/cache/.gradle"
  GRADLE_HOME_CACHES: "${GRADLE_HOME}/caches/"
  GRADLE_HOME_WRAPPER: "${GRADLE_HOME}/wrapper/"

before_script:
  # Grant permissions for .sh files used by this CI script.
  - ./ci/permissions.sh
  # Perform checks ensuring that we have everything for the CI build.
  - ./ci/checks.sh
  # Download keystore with signing keys used to sign APK.
  - ./ci/download-keystore.sh
  # Export environment variables.
  - export MOFA_ANDROID_KEYSTORE="/keystore"
  - export GRADLE_USER_HOME="${GRADLE_HOME}"

stages:
  - build
  - test
  - deploy

### JOBS ===========================================================================================

#################
## DEVELOPMENT ##
#################

# Job which builds code base for a particular FEATURE.
development:build:
  stage: build
  cache:
    paths:
      - ${MAVEN_REPOSITORY}
      - ${GRADLE_HOME_CACHES}
      - ${GRADLE_HOME_WRAPPER}
  cache:
    key: "development:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: push
  script:
    - ./gradlew :mobile:buildDevelopment
  only:
    - /^feature.*$/
    - /^tablet/feature.*$/

# Job which executes tests against code base for a particular FEATURE.
development:test-unit:
  stage: test
  cache:
    key: "development:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:testDevelopmentUsingUnitTests
  only:
    - /^feature.*$/
    - /^tablet/feature.*$/

#######################
## QUALITY ASSURANCE ##
#######################

# Job which builds code base for the QUALITY ASSURANCE environment.
qa:build:
  stage: build
  cache:
    paths:
      - ${MAVEN_REPOSITORY}
      - ${GRADLE_HOME_CACHES}
      - ${GRADLE_HOME_WRAPPER}
  cache:
    key: "qa:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: push
  script:
    - ./ci/increment-version-code.sh ${FILE_VERSION_PROPERTIES}
    - ./gradlew :mobile:buildQA
  only:
    - develop
    - tablet/develop

# Job which executes tests against code base for the QUALITY ASSURANCE environment.
qa:test-unit:
  stage: test
  cache:
    key: "qa:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:testQAUsingUnitTests
  only:
    - develop
    - tablet/develop

# Job which executes Acceptance tests against code base for the QUALITY ASSURANCE environment.
#qa:test-acceptance:
#  stage: test
#  cache:
#    key: "qa:pipeline-${CI_PIPELINE_ID}"
#    paths:
#      - ${BUILD_DIRECTORY_MOBILE}
#    policy: pull
#  script:
#    - emulator-start.sh ${ANDROID_EMULATOR_NAME}
#    - ./gradlew :mobile:testQAUsingAcceptanceTests
#  only:
#    - develop

# Job which uploads APK into the QUALITY ASSURANCE environment.
qa:deploy:
  stage: deploy
  cache:
    key: "qa:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:deployQA
  artifacts:
    paths:
      - mobile/beta/apk/mapping
  environment:
    name: Quality Assurance
    url: https://fabric.io/universum-studios/android/apps/${PRODUCT_ID}.qa/beta/releases/latest
  only:
    - develop
    - tablet/develop
  when: manual

#############
## STAGING ##
#############

# Job which builds code base for the STAGING environment.
staging:build:
  stage: build
  cache:
    paths:
      - ${MAVEN_REPOSITORY}
      - ${GRADLE_HOME_CACHES}
      - ${GRADLE_HOME_WRAPPER}
  cache:
    key: "staging:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: push
  script:
    - ./ci/increment-version-code.sh ${FILE_VERSION_PROPERTIES}
    - ./gradlew :mobile:buildStaging
  only:
    - /^release.*$/

# Job which executes tests against code base for the STAGING environment.
staging:test-unit:
  stage: test
  cache:
    key: "staging:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:testStagingUsingUnitTests
  only:
    - /^release.*$/

# Job which executes Acceptance tests against code base for the STAGING environment.
#staging:test-acceptance:
#  stage: test
#  cache:
#    key: "staging:pipeline-${CI_PIPELINE_ID}"
#    paths:
#      - ${BUILD_DIRECTORY_MOBILE}
#    policy: pull
#  script:
#    - emulator-start.sh ${ANDROID_EMULATOR_NAME}
#    - ./gradlew :mobile:testStagingUsingAcceptanceTests
#  only:
#    - /^release.*$/

# Job which uploads APK into the STAGING environment.
staging:deploy:
  stage: deploy
  cache:
    key: "staging:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:deployStaging
  artifacts:
    paths:
      - mobile/play/apk/mapping
  environment:
    name: Staging
    url: https://play.google.com/store/apps/details?id=${PRODUCT_ID}
  only:
    - /^release.*$/
  when: manual

################
## HOT-FIXING ##
################

# Job which builds code base for a particular HOT-FIX.
hotfix:build:
  stage: build
  cache:
    paths:
      - ${MAVEN_REPOSITORY}
      - ${GRADLE_HOME_CACHES}
      - ${GRADLE_HOME_WRAPPER}
  cache:
    key: "hotfix:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: push
  script:
    - ./ci/increment-version-code.sh ${FILE_VERSION_PROPERTIES}
    - ./gradlew :mobile:buildQA
  only:
    - /^hotfix.*$/

# Job which executes tests against code base for a particular HOT-FIX.
hotfix:test-unit:
  stage: test
  cache:
    key: "hotfix:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:testQAUsingUnitTests
  only:
    - /^hotfix.*$/

# Job which executes Acceptance tests against code base for a particular HOT-FIX.
#hotfix:test-acceptance:
#  stage: test
#  cache:
#    key: "hotfix:pipeline-${CI_PIPELINE_ID}"
#    paths:
#      - ${BUILD_DIRECTORY_MOBILE}
#    policy: pull
#  script:
#    - emulator-start.sh ${ANDROID_EMULATOR_NAME}
#    - ./gradlew :mobile:testQAUsingAcceptanceTests
#  only:
#    - /^hotfix.*$/

# Job which uploads APK for a particular HOT-FIX into the QUALITY ASSURANCE environment.
hotfix:deploy:
  stage: deploy
  cache:
    key: "hotfix:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:deployQA
  artifacts:
    paths:
      - mobile/beta/apk/mapping
  environment:
    name: Quality Assurance
    url: https://fabric.io/universum-studios/android/apps/${PRODUCT_ID}.qa/beta/releases/latest
  only:
    - /^hotfix.*$/
  when: manual

################
## PRODUCTION ##
################

# Job which builds code base for the PRODUCTION environment.
production:build:
  stage: build
  cache:
    paths:
      - ${MAVEN_REPOSITORY}
      - ${GRADLE_HOME_CACHES}
      - ${GRADLE_HOME_WRAPPER}
  cache:
    key: "production:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: push
  script:
    - ./ci/increment-version-code.sh ${FILE_VERSION_PROPERTIES}
    - ./gradlew :mobile:buildProduction
  only:
    - master

# Job which executes tests against code base for the PRODUCTION environment.
production:test-unit:
  stage: test
  cache:
    key: "production:pipeline-${CI_PIPELINE_ID}"
    paths:
      - ${BUILD_DIRECTORY_MOBILE}
    policy: pull
  script:
    - ./gradlew :mobile:testProductionUsingUnitTests
  only:
    - master

# Job which executes Acceptance tests against code base for the PRODUCTION environment.
#production:test-acceptance:
#  stage: test
#  cache:
#    key: "production:pipeline-${CI_PIPELINE_ID}"
#    paths:
#      - ${BUILD_DIRECTORY_MOBILE}
#    policy: pull
#  script:
#    - emulator-start.sh ${ANDROID_EMULATOR_NAME}
#    - ./gradlew :mobile:testProductionUsingAcceptanceTests
#  only:
#    - master

# Job which uploads APK into the PRODUCTION environment.
#production:deploy:
#  stage: deploy
#  cache:
#    key: "production:pipeline-${CI_PIPELINE_ID}"
#    paths:
#      - ${BUILD_DIRECTORY_MOBILE}
#    policy: pull
#  script:
#    - ./gradlew :mobile:deployProduction
#  artifacts:
#    paths:
#      - mobile/play/apk/mapping
#  environment:
#    name: Production
#    url: https://play.google.com/store/apps/details?id=${PRODUCT_ID}
#  only:
#    - master